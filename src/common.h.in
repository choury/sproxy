#ifndef COMMON_H__
#define COMMON_H__

#include <stdio.h>
#include <stdint.h>
#include <syslog.h>
#include <arpa/inet.h>
#ifdef __APPLE__
#include <sys/event.h>
#else
#include <sys/epoll.h>
#endif


#define Min(x, y) ((int64_t)(x) < (int64_t)(y)?(x):(y))
#define Max(x, y) ((int64_t)(x) > (int64_t)(y)?(x):(y))

/*
 * * The next routines deal with comparing 32 bit unsigned ints
 * * and worry about wraparound (automatic with unsigned arithmetic).
 * */
static inline int before(uint32_t seq1, uint32_t seq2)
{
    return (int32_t)(seq1-seq2) < 0;
}

static inline int noafter(uint32_t seq1, uint32_t seq2)
{
    return (int32_t)(seq1-seq2) <= 0;
}
#define after(seq2, seq1) before(seq1, seq2)
#define nobefore(seq2, seq1) noafter(seq1, seq2)


#define DOMAINLIMIT   256
#define HEADLENLIMIT  8192
#define URLLIMIT      4096

#define BUF_LEN       16384

typedef enum{NONE, TCP=SOCK_STREAM, UDP=SOCK_DGRAM, ICMP}Protocol;

extern uint32_t debug;

#define DEVENT    (1U<<0)
#define DDNS      (1U<<1)
#define DHTTP2    (1U<<2)
#define DJOB      (1U<<3)
#define DVPN      (1U<<4)
#define DHPACK    (1U<<5)
#define DHTTP     (1U<<7)

#define DEVENT_STR  "[EVENT]"
#define DDNS_STR    "[DNS]"
#define DHTTP2_STR  "[HTTP2]"
#define DJOB_STR    "[JOB]"
#define DVPN_STR    "[VPN]"
#define DHPACK_STR  "[HPACK]"
#define DHTTP_STR   "[HTTP]"

#ifdef  __cplusplus
extern "C" {
#endif

void slog(int level, const char* fmt, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

#ifndef __ANDROID__
void vslog(int level, const char* fmt, va_list arg);
#define VLOG(...) vslog(__VA_ARGS__)
#else
#include "com_choury_sproxy_Service.h"
#define VLOG(...) android_vlog(__VA_ARGS__);
#endif

#define  LOG(...)  slog(LOG_INFO,  __VA_ARGS__)
#define  LOGE(...) \
do{\
    char tmp[1024]; \
    snprintf(tmp, sizeof(tmp), __VA_ARGS__); \
    slog(LOG_ERR, "%s[%d]: %s", __PRETTY_FUNCTION__, __LINE__, tmp);\
}while(0)

uint32_t getmtime();

#define  LOGD(mod, ...)  \
do{\
    if(debug & mod) {\
        char tmp[1024]; \
        snprintf(tmp, sizeof(tmp), __VA_ARGS__); \
        slog(LOG_DEBUG, "%05u:%s: %s", getmtime()%100000, mod##_STR, tmp); \
    }\
}while(0)


#ifndef HTONL
#define HTONL(x) (x = htonl(x))
#endif

#ifndef HTONS
#define HTONS(x) (x = htons(x))
#endif

#ifndef NTOHL
#define NTOHL(x) (x = ntohl(x))
#endif

#ifndef NTOHS
#define NTOHS(x) (x = ntohs(x))
#endif

#ifndef SCNx64
#define SCNx64   "llx"
#endif

#ifndef SCNu64
#define SCNu64   "llu"
#endif

#define get16(a)  (((uchar*)(a))[0]<<8 | ((uchar*)(a))[1])
#define set16(a, x) \
do {\
    ((uchar*)(a))[0] = ((x)>>8) & 0xff;\
    ((uchar*)(a))[1] = (x) & 0xff;\
}while(0);

#define get24(a) (((uchar*)(a))[0]<<16 | ((uchar*)(a))[1]<<8 | ((uchar*)(a))[2])
#define set24(a, x) \
do {\
    ((uchar*)(a))[0] = ((x)>>16) & 0xff;\
    ((uchar*)(a))[1] = ((x)>>8) & 0xff;\
    ((uchar*)(a))[2] = (x) & 0xff;\
}while(0);

#define get32(a) (((uchar*)(a))[0]<<24 | ((uchar*)(a))[1]<<16 | ((uchar*)(a))[2]<<8 | ((uchar*)(a))[3])
#define set32(a, x) \
do {\
    ((uchar*)(a))[0] = ((x)>>24) & 0xff;\
    ((uchar*)(a))[1] = ((x)>>16) & 0xff;\
    ((uchar*)(a))[2] = ((x)>>8) & 0xff;\
    ((uchar*)(a))[3] = (x) & 0xff;\
}while(0);

#define get64(a) \
    ((uint64_t)((uchar*)(a))[0]<<56 |\
     (uint64_t)((uchar*)(a))[1]<<48 |\
     (uint64_t)((uchar*)(a))[2]<<40 |\
     (uint64_t)((uchar*)(a))[3]<<32 |\
     (uint64_t)((uchar*)(a))[4]<<24 |\
     (uint64_t)((uchar*)(a))[5]<<16 |\
     (uint64_t)((uchar*)(a))[6]<<8 |\
     (uint64_t)((uchar*)(a))[7])

#define set64(a, x) \
do {\
    ((uchar*)(a))[0] = ((uint64_t)(x)>>56) & 0xff;\
    ((uchar*)(a))[1] = ((uint64_t)(x)>>48) & 0xff;\
    ((uchar*)(a))[2] = ((uint64_t)(x)>>40) & 0xff;\
    ((uchar*)(a))[3] = ((uint64_t)(x)>>32) & 0xff;\
    ((uchar*)(a))[4] = ((uint64_t)(x)>>24) & 0xff;\
    ((uchar*)(a))[5] = ((uint64_t)(x)>>16) & 0xff;\
    ((uchar*)(a))[6] = ((uint64_t)(x)>>8) & 0xff;\
    ((uchar*)(a))[7] = ((uint64_t)x) & 0xff;\
}while(0);

#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)

#define NOERROR             0U
#define SOCKET_ERR          80U
#define CONNECT_FAILED      81U
#define CONNECT_TIMEOUT     82U
#define SSL_SHAKEHAND_ERR   83U
#define HEAD_TOO_LONG_ERR   84U
#define HTTP_PROTOCOL_ERR   85U
#define READ_ERR            86U
#define WRITE_ERR           87U
#define PEER_LOST_ERR       88U
#define IP_BLOCK_ERR        89U
#define TCP_RESET_ERR       90U
#define DNS_FAILED          91U
#define VPN_AGED_ERR        92U
#define SNI_HOST_ERR        93U
#define ERROR_MASK          0xff
#define DISCONNECT_FLAG     (1U<<31U)

typedef unsigned char uchar;
typedef void (* Dumper)(void* param, const char* fmt, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

int protectFd(int sockfd);


union sockaddr_un{
    struct sockaddr addr;
    struct sockaddr_in addr_in;
    struct sockaddr_in6 addr_in6;
};

struct Destination{
    char protocol[DOMAINLIMIT];
    char hostname[DOMAINLIMIT];
    uint16_t port;
};

#cmakedefine01 Backtrace_FOUND
#if Backtrace_FOUND
#include <@Backtrace_HEADER@>
#endif

#ifdef  __cplusplus
}
#endif

#endif
